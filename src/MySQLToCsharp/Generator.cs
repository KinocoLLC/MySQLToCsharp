using MySQLToCsharp.TypeConverters;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace MySQLToCsharp
{
    public class Generator
    {
        private static readonly string extension = ".cs";
        private static readonly ITypeConverter defaultTypeConverter = new StandardConverter();

        public ITypeConverter TypeConverter { get; }

        private readonly Encoding encoding;

        public Generator(bool addbom, ITypeConverter typeConverter)
        {
            TypeConverter = typeConverter;
            encoding = new UTF8Encoding(addbom);
        }

        public void Save(string className, string text, string outputFolderPath, bool dry)
        {
            var fileName = className + extension;
            var outputFile = Path.Combine(outputFolderPath, fileName);

            if (!Directory.Exists(outputFolderPath))
            {
                Directory.CreateDirectory(outputFolderPath);
            }

            if (File.Exists(outputFile))
            {
                var current = File.ReadAllText(outputFile, encoding);
                if (text == current)
                {
                    Console.WriteLine($"[-] skipped: {fileName} (no change)");
                    return;
                }
            }
            Console.WriteLine($"[o] generate: {fileName}");
            if (!dry)
            {
                File.WriteAllText(outputFile, text, encoding);
            }
        }

        public string Generate(string @namespace, string className, MySqlTableDefinition table, ITypeConverter typeConverter)
        {
            var builder = new StringBuilder();
            // namespace
            builder.AppendLine($"// ------------------------------------------------------------------------------");
            builder.AppendLine($"// <auto-generated>");
            builder.AppendLine($"// Code Generated by {nameof(MySQLToCsharp)}");
            builder.AppendLine($"// </auto-generated>");
            builder.AppendLine($"// ------------------------------------------------------------------------------");
            builder.AppendLine();
            builder.AppendLine($"using System;");
            builder.AppendLine($"using System.ComponentModel.DataAnnotations;");
            builder.AppendLine($"using System.ComponentModel.DataAnnotations.Schema;");
            builder.AppendLine();

            builder.AppendLine($"namespace { @namespace}");
            builder.AppendLine("{");

            // class
            if (!string.IsNullOrWhiteSpace(table.Comment))
            {
                builder.AppendLineIndent4($"/// <summary>");
                builder.AppendLineIndent4($"/// {table.Comment}");
                builder.AppendLineIndent4($"/// </summary>");
            }
            builder.AppendLineIndent4($@"public partial class {className}");
            builder.AppendLineIndent4("{");
            // property
            foreach (var column in table.Columns)
            {
                if (!string.IsNullOrWhiteSpace(column.Comment))
                {
                    builder.AppendLineIndent8($"/// <summary>");
                    builder.AppendLineIndent8($"/// {column.Comment}");
                    builder.AppendLineIndent8($"/// </summary>");
                }
                var (clrType, attributes) = typeConverter.Convert(column.Data);
                if (column.PrimaryKeyReference != null)
                {
                    builder.AppendLineIndent8($"[Key]");
                    builder.AppendLineIndent8($"[Column(Order = {column.Order})]");
                }
                foreach (var attribute in attributes)
                {
                    builder.AppendLineIndent8($"[{attribute}]");
                }
                builder.AppendLineIndent8($"public {clrType} {column.Name} {{ get; set; }}");
            }
            builder.AppendLineIndent4(@"}");
            builder.AppendLine("}");

            return builder.ToString();
        }

        /// <summary>
        /// Change 
        /// </summary>
        /// <param name="tableName"></param>
        /// <returns></returns>
        public static string GetClassName(string tableName)
            => tableName.Last() == 's'
                ? tableName[0..^1] // Foos -> Foo
                : tableName;
    }

    internal static class StringBuilderExtensions
    {
        private const string indent4 = "    ";
        private const string indent8 = "        ";

        public static void AppendLineIndent4(this StringBuilder builder, string value)
        {
            builder.AppendLine($"{indent4}{value}");
        }
        public static void AppendLineIndent8(this StringBuilder builder, string value)
        {
            builder.AppendLine($"{indent8}{value}");
        }
    }
}
