using MySQLToCsharp.TypeConverters;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace MySQLToCsharp
{
    public class Generator
    {
        private static readonly string extension = ".cs";
        private static readonly ITypeConverter defaultTypeConverter = new StandardConverter();

        public ITypeConverter TypeConverter { get; }

        private readonly Encoding encoding;

        public Generator(bool addbom)
        {
            TypeConverter = defaultTypeConverter;
            encoding = new UTF8Encoding(addbom);
        }
        public Generator(bool addbom, ITypeConverter typeConverter)
        {
            TypeConverter = typeConverter;
            encoding = new UTF8Encoding(addbom);
        }

        public void Save(string @namespace, IEnumerable<MySqlTableDefinition> tables, string outputFolderPath)
        {
            foreach (var table in tables)
            {
                Save(@namespace, table, outputFolderPath);
            }
        }
        public void Save(string @namespace, MySqlTableDefinition table, string outputFolderPath)
        {
            var @class = GetClassName(table.Name);
            var fileName = @class + extension;
            var outputFile = Path.Combine(outputFolderPath, fileName);
            var generated = Generate(@namespace, @class, table, TypeConverter);

            if (!Directory.Exists(outputFolderPath))
            {
                Directory.CreateDirectory(outputFolderPath);
            }

            if (File.Exists(outputFile))
            {
                var current = File.ReadAllText(outputFile, encoding);
                if (generated == current)
                {
                    Console.WriteLine($"[-] skipped: {fileName} (no change)");
                    return;
                }
            }
            Console.WriteLine($"[o] generate: {fileName}");
            File.WriteAllText(outputFile, generated, encoding);
        }

        private string Generate(string @namespace, string classname, MySqlTableDefinition table, ITypeConverter typeConverter)
        {
            var builder = new StringBuilder();
            builder.Append($@"// Code generated by SqlToCsharp

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace {@namespace}
{{
    public partial class {classname}
    {{
");
            foreach (var column in table.Columns)
            {
                var (clrType, attributes) = typeConverter.Convert(column.Data);
                if (column.PrimaryKeyReference != null)
                {
                    builder.AppendLine($"        [Key]");
                    builder.AppendLine($"        [Column(Order = {column.Order})]");
                }
                foreach (var attribute in attributes)
                {
                    builder.AppendLine($"        [{attribute}]");
                }
                builder.AppendLine($"        public {clrType} {column.Name} {{ get; set; }}");
            }
            builder.Append(@"    }
}
");
            return builder.ToString();
        }

        /// <summary>
        /// Change 
        /// </summary>
        /// <param name="tableName"></param>
        /// <returns></returns>
        private static string GetClassName(string tableName)
            => tableName.Last() == 's'
                ? tableName.Substring(0, tableName.Length - 1)
                : tableName;
    }
}
