using Cocona;
using FluentAssertions;
using MySQLToCsharp.Internal;
using System;
using System.IO;
using System.Linq;
using Xunit;

namespace MySQLToCsharp.Tests
{
    public class CommandLineDirTest
    {
        [Fact]
        public void DirExecutionTest()
        {
            var id = Guid.NewGuid().ToString();
            var args = new[] { "dir", "-i", "test_data/simple/", "-o", "hoge", "-n", "Fuga", "--executionid", id };
            CoconaLiteApp.Run<QueryToCSharp>(args);
            var expected = @"// ------------------------------------------------------------------------------
// <auto-generated>
// Code Generated by MySQLToCsharp
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Fuga
{
    public partial class ships_gun
    {
        public int guns_id { get; set; }
        public int ship_id { get; set; }
    }
}
";
            var msg = QueryToCSharp.Context.GetLogs(id).First();
            msg.Should().Be(InternalUtils.NormalizeNewLines(expected));
        }

        [Fact]
        public void DirExecutionAnnotationTest()
        {
            var id = Guid.NewGuid().ToString();
            var args = new[] { "dir", "-i", "test_data/simple_annotation/", "-o", "hoge", "-n", "Fuga", "--executionid", id };
            CoconaLiteApp.Run<QueryToCSharp>(args);
            var expected = @"// ------------------------------------------------------------------------------
// <auto-generated>
// Code Generated by MySQLToCsharp
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Fuga
{
    public partial class quengine
    {
        public int id { get; set; }
        [Required]
        [StringLength(10)]
        public string class { get; set; }
        [Required]
        public byte[] data { get; set; }
    }
}
";
            var msg = QueryToCSharp.Context.GetLogs(id).First();
            msg.Should().Be(InternalUtils.NormalizeNewLines(expected));
        }

        [Fact]
        public void DirExecutionIgnoreEolWindowsTest()
        {
            var id = Guid.NewGuid().ToString();
            var args = new[] { "dir", "-i", "test_data/simple_eol/", "-o", "eol_windows", "-n", "Fuga", "--executionid", id };
            CoconaLiteApp.Run<QueryToCSharp>(args);
            var expected = @"// ------------------------------------------------------------------------------
// <auto-generated>
// Code Generated by MySQLToCsharp
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Fuga
{
    public partial class eol
    {
        public int guns_id { get; set; }
        public int ship_id { get; set; }
    }
}
";
            var msg = QueryToCSharp.Context.GetLogs(id).First();
            msg.Should().Be(InternalUtils.NormalizeNewLines(expected));
            QueryToCSharp.Context.Clear();

            // replace existing for windows test
            var replaced = File.ReadAllText("hoge/Eol.cs").Replace("\r\n", "\n");
            File.WriteAllText("eol_windows/Eol.cs", replaced);

            CoconaLiteApp.Run<QueryToCSharp>(args);
            File.ReadAllText("eol_windows/Eol.cs").Should().Be(replaced);

            var ignoreeolArgs = new[] { "dir", "-i", "test_data/simple_eol/", "-o", "eol_windows", "-n", "Fuga", "--ignoreeol=false", "--executionid", id };
            CoconaLiteApp.Run<QueryToCSharp>(ignoreeolArgs);
            File.ReadAllText("eol_windows/Eol.cs").Replace("\r\n", "\n").Should().Be(replaced);
        }

        [Fact]
        public void DirExecutionIgnoreEolLinuxTest()
        {
            var id = Guid.NewGuid().ToString();
            var args = new[] { "dir", "-i", "test_data/simple_eol/", "-o", "eol_linux", "-n", "Fuga", "--executionid", id };
            CoconaLiteApp.Run<QueryToCSharp>(args);
            var expected = @"// ------------------------------------------------------------------------------
// <auto-generated>
// Code Generated by MySQLToCsharp
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Fuga
{
    public partial class eol
    {
        public int guns_id { get; set; }
        public int ship_id { get; set; }
    }
}
";
            var msg = QueryToCSharp.Context.GetLogs(id).First();
            msg.Should().Be(InternalUtils.NormalizeNewLines(expected));
            QueryToCSharp.Context.Clear();

            // replace existing for windows test
            var replaced = File.ReadAllText("eol_linux/Eol.cs").Replace("\r\n", "\n").Replace("\n", "\r\n");
            File.WriteAllText("eol_linux/Eol.cs", replaced);

            CoconaLiteApp.Run<QueryToCSharp>(args);
            File.ReadAllText("eol_linux/Eol.cs").Should().Be(replaced);

            var ignoreeolArgs = new[] { "dir", "-i", "test_data/simple_eol/", "-o", "eol_linux", "-n", "Fuga", "--ignoreeol=false", "--executionid", id };
            CoconaLiteApp.Run<QueryToCSharp>(ignoreeolArgs);
            File.ReadAllText("eol_linux/Eol.cs").Replace("\r\n", "\n").Replace("\n", "\r\n").Should().Be(replaced);
        }
    }
}
